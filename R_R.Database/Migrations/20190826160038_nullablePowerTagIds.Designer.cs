// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using R_R.Database.Contexts;

namespace R_R.Database.Migrations
{
    [DbContext(typeof(R_RContext))]
    [Migration("20190826160038_nullablePowerTagIds")]
    partial class nullablePowerTagIds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("R_R.Common.Entities.Character", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildupPoints");

                    b.Property<int>("CrewId");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<int>("GameId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("ID");

                    b.HasIndex("CrewId");

                    b.HasIndex("GameId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("R_R.Common.Entities.CharacterLogos", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("LogosConceptId");

                    b.HasKey("CharacterId", "LogosConceptId");

                    b.HasIndex("LogosConceptId");

                    b.ToTable("CharacterLogoses");
                });

            modelBuilder.Entity("R_R.Common.Entities.CharacterMythos", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("MythosConceptId");

                    b.HasKey("CharacterId", "MythosConceptId");

                    b.HasIndex("MythosConceptId");

                    b.ToTable("CharacterMythoses");
                });

            modelBuilder.Entity("R_R.Common.Entities.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId");

                    b.Property<string>("Name");

                    b.Property<string>("Weakness");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("R_R.Common.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<int>("McID");

                    b.HasKey("Id");

                    b.HasIndex("McID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("R_R.Common.Entities.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId");

                    b.Property<DateTime>("SessionDate");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("R_R.Common.Entities.HelpHurt", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("OtherCharacterId");

                    b.Property<int>("Help");

                    b.Property<int>("Hurt");

                    b.HasKey("CharacterId", "OtherCharacterId");

                    b.HasIndex("OtherCharacterId");

                    b.ToTable("HelpHurts");
                });

            modelBuilder.Entity("R_R.Common.Entities.LogosConcept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LogosConcepts");
                });

            modelBuilder.Entity("R_R.Common.Entities.LogosTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attention");

                    b.Property<int>("Crack");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Identity");

                    b.Property<bool>("IsBurned");

                    b.Property<int>("LogosConceptId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("LogosConceptId");

                    b.ToTable("LogosThemes");
                });

            modelBuilder.Entity("R_R.Common.Entities.MC", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Mcs");
                });

            modelBuilder.Entity("R_R.Common.Entities.MythosConcept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MythosConcepts");
                });

            modelBuilder.Entity("R_R.Common.Entities.MythosTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attention");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<int>("Fade");

                    b.Property<bool>("IsBurned");

                    b.Property<string>("Mystery");

                    b.Property<int>("MythosConceptId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MythosConceptId");

                    b.ToTable("MythosThemes");
                });

            modelBuilder.Entity("R_R.Common.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("GameId");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("R_R.Common.Entities.PowerTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CrewId");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<bool>("IsBroad");

                    b.Property<bool>("IsBurned");

                    b.Property<int?>("LogosThemeId");

                    b.Property<int?>("MythosThemeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.Property<string>("QuestionAnswered");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("LogosThemeId");

                    b.HasIndex("MythosThemeId");

                    b.ToTable("PowerTags");
                });

            modelBuilder.Entity("R_R.Common.Entities.R_RUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Token");

                    b.Property<DateTime>("TokenExpires");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("R_R.Common.Entities.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId");

                    b.Property<string>("Description");

                    b.Property<int>("Effect");

                    b.Property<bool>("IsPositive");

                    b.HasKey("ID");

                    b.HasIndex("CharacterId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("R_R.Common.Entities.StoryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("CrewId");

                    b.Property<int>("GameId");

                    b.Property<int>("JuiceCost");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CrewId");

                    b.HasIndex("GameId");

                    b.ToTable("StoryTags");
                });

            modelBuilder.Entity("R_R.Common.Entities.UserCharacter", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<string>("UserId");

                    b.HasKey("CharacterId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharacters");
                });

            modelBuilder.Entity("R_R.Common.Entities.UserGame", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<string>("UserId");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("R_R.Common.Entities.R_RUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("R_R.Common.Entities.R_RUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.R_RUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("R_R.Common.Entities.R_RUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.Character", b =>
                {
                    b.HasOne("R_R.Common.Entities.Crew", "Crew")
                        .WithMany("Characters")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.CharacterLogos", b =>
                {
                    b.HasOne("R_R.Common.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.LogosConcept", "LogosConcept")
                        .WithMany()
                        .HasForeignKey("LogosConceptId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.CharacterMythos", b =>
                {
                    b.HasOne("R_R.Common.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.MythosConcept", "MythosConcept")
                        .WithMany()
                        .HasForeignKey("MythosConceptId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.Crew", b =>
                {
                    b.HasOne("R_R.Common.Entities.Game", "Game")
                        .WithMany("Crews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.Game", b =>
                {
                    b.HasOne("R_R.Common.Entities.MC", "MC")
                        .WithMany("Games")
                        .HasForeignKey("McID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.GameSession", b =>
                {
                    b.HasOne("R_R.Common.Entities.Game", "Game")
                        .WithMany("Sessions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.HelpHurt", b =>
                {
                    b.HasOne("R_R.Common.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.Character", "OtherCharacter")
                        .WithMany()
                        .HasForeignKey("OtherCharacterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.LogosTheme", b =>
                {
                    b.HasOne("R_R.Common.Entities.LogosConcept", "LogosConcept")
                        .WithMany("LogosThemes")
                        .HasForeignKey("LogosConceptId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.MC", b =>
                {
                    b.HasOne("R_R.Common.Entities.R_RUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.MythosTheme", b =>
                {
                    b.HasOne("R_R.Common.Entities.MythosConcept", "Rift")
                        .WithMany("MythosThemes")
                        .HasForeignKey("MythosConceptId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.Note", b =>
                {
                    b.HasOne("R_R.Common.Entities.Game", "Game")
                        .WithMany("Notes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.R_RUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.PowerTag", b =>
                {
                    b.HasOne("R_R.Common.Entities.Crew")
                        .WithMany("PowerTags")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.LogosTheme", "LogosTheme")
                        .WithMany("PowerTags")
                        .HasForeignKey("LogosThemeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.MythosTheme", "MythosTheme")
                        .WithMany("PowerTags")
                        .HasForeignKey("MythosThemeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.Status", b =>
                {
                    b.HasOne("R_R.Common.Entities.Character", "Character")
                        .WithMany("Statuses")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.StoryTag", b =>
                {
                    b.HasOne("R_R.Common.Entities.Character", "Character")
                        .WithMany("StoryTags")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.Crew")
                        .WithMany("StoryTags")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.Game", "Game")
                        .WithMany("StoryTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.UserCharacter", b =>
                {
                    b.HasOne("R_R.Common.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.R_RUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("R_R.Common.Entities.UserGame", b =>
                {
                    b.HasOne("R_R.Common.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("R_R.Common.Entities.R_RUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
